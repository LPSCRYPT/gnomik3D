// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { SchemaType } from "@latticexyz/store/src/Types.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

struct CounterTable {
  uint32 value;
}

library CounterTable_ {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  /** Register the table's schema */
  function registerSchema(uint256 tableId) internal {
    StoreSwitch.registerSchema(tableId, getSchema());
  }

  function registerSchema(uint256 _tableId, IStore _store) internal {
    _store.registerSchema(_tableId, getSchema());
  }

  /** Set the table's data */
  function set(
    uint256 _tableId,
    bytes32 key,
    uint32 value
  ) internal {
    bytes memory _data = abi.encodePacked(value);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  function set(
    uint256 _tableId,
    bytes32 key,
    CounterTable memory _table
  ) internal {
    set(_tableId, key, _table.value);
  }

  function setValue(
    uint256 _tableId,
    bytes32 key,
    uint32 value
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked(value));
  }

  function getValue(uint256 _tableId, bytes32 key) internal view returns (uint32 value) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return uint32(Bytes.slice4(_blob, 0));
  }

  /** Get the table's data */
  function get(uint256 _tableId, bytes32 key) internal view returns (CounterTable memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  function get(
    uint256 _tableId,
    IStore _store,
    bytes32 key
  ) internal view returns (CounterTable memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = _store.getRecord(_tableId, _keyTuple);
    return decode(_blob);
  }

  function decode(bytes memory _blob) internal pure returns (CounterTable memory _table) {
    _table.value = uint32(Bytes.slice4(_blob, 0));
  }
}
